name: Stage CI pipeline

on:
  workflow_call:
    inputs:
      dh_name:
        type: string
        required: true
      deploy_repository:
        type: string
        required: true
      deploy_local_path:
        type: string
        required: true
      product_type:
        type: string
        required: true
      public_path:
        type: string
        required: false
      service_url:
        type: string
        required: false
      gtm:
        type: string
        required: false
      target:
        type: string
        required: false
      
    secrets:
      tg_token:
        required: true
      tg_chat_id:
        required: true
      dh_token:
        required: true
      deploy_repo_ssh_key:
        required: true
      dd_sec_url:
        required: true
      dd_sec_key:
        required: true

jobs:
  
  build:
    name: Build and push docker image
    runs-on: ubuntu-latest
    steps:

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set docker image name
        run: |
          echo DOCKER_IMAGE_NAME=$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]') >> $GITHUB_ENV

      - name: Docker meta
        id: docker_meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.DOCKER_IMAGE_NAME }}
          flavor: |
            latest=false
          tags: |
            type=semver,pattern={{version}}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ inputs.dh_name }}
          password: ${{ secrets.dh_token }}

      - name: Build and push
        uses: docker/build-push-action@v3
        with:
          build-args: |
            PUBLIC_PATH=${{ inputs.public_path }}
            SERVICE_URL=${{ inputs.service_url }}
            GTM=${{ inputs.gtm }}
            target=${{ inputs.target }}
          push: true
          context: .
          file: ./Dockerfile
          tags: ${{ steps.docker_meta.outputs.tags }}
          labels: ${{ steps.docker_meta.outputs.labels }}

      - name: Send message on failure
        if: ${{ failure() }}
        uses: yamaks2306/telegram-notification@main
        with:
          token: ${{ secrets.tg_token }}
          chat_id: ${{ secrets.tg_chat_id }}
          include_commit_info: false
          message: 'ðŸ’¥ðŸ’¥ðŸ’¥ Job was failed! Repository: ${{ github.repository }}, workflow: ${{ github.workflow }}, Job: ${{ github.job }}'

    outputs:
      docker_tag: ${{ steps.docker_meta.outputs.tags }}


  update_deploy_repo:
    name: Update deploy repo
    needs:
      - build
    runs-on: ubuntu-latest
    steps:

      - name: Set app name
        run: |
          echo APP_NAME=$(awk -F "/" '{print $2}' <<< ${{ github.repository }}) >> $GITHUB_ENV

      - name: Checkout configs repo
        uses: actions/checkout@v3
        with:
          repository: ${{ inputs.deploy_repository }}
          path: ${{ inputs.deploy_local_path }}
          ssh-key: ${{ secrets.deploy_repo_ssh_key }}

      - name: Update image version
        uses: fjogeleit/yaml-update-action@main
        with:
          valueFile: 'helm/${{ env.APP_NAME }}/production-values.yaml'
          propertyPath: 'image.tag'
          value: ${{ needs.build.outputs.docker_tag }}
          repository: ${{ inputs.deploy_repository }}
          workDir: ${{ inputs.deploy_local_path }}
          updateFile: true
          createPR: false
          commitChange: false

      - name: Install helm
        uses: yamaks2306/kube-tools@master
        with:
          helm: 3.7.2

      - name: Lint helm
        run: |
          helm lint ${{ inputs.deploy_local_path }}/helm/${{ env.APP_NAME }} --values ${{ inputs.deploy_local_path }}/helm/${{ env.APP_NAME }}/production-values.yaml

      - name: Generate manifests with Helm
        run: | 
          helm template production-${{ env.APP_NAME }} ${{ inputs.deploy_local_path }}/helm/${{ env.APP_NAME }} --values ${{ inputs.deploy_local_path }}/helm/${{ env.APP_NAME }}/production-values.yaml > ${{ inputs.deploy_local_path }}/apps/${{ env.APP_NAME }}/production/${{ env.APP_NAME }}.yaml

      - name: Run Trivy vulnerability scanner in IaC mode
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'config'
          hide-progress: false
          format: 'sarif'
          output: 'manifest-report.sarif'
          exit-code: '0'
          scan-ref: '${{ inputs.deploy_local_path }}/apps/${{ env.APP_NAME }}/production/'

      - name: Upload report artifact
        uses: actions/upload-artifact@v3
        with:
          name: manifest-report
          path: ./manifest-report.sarif

      - name: Commit and push changes
        run: |
          eval `ssh-agent -s`
          ssh-add - <<< '${{ secrets.deploy_repo_ssh_key }}'
          cd ${{ inputs.deploy_local_path }}
          git config user.name github-action
          git config user.email github-actions@github.com
          git add .
          git commit -m 'Image version updated ${{ needs.build.outputs.docker_tag }}'
          git push

      - name: Notify Telegram
        uses: yamaks2306/telegram-notification@main
        if: always()
        with:
          token: ${{ secrets.tg_token }}
          chat_id: ${{ secrets.tg_chat_id }}
          docker_tags: ${{ needs.build.outputs.docker_tag }}

  upload_reports:
    name: Upload security reports
    runs-on: ubuntu-latest
    needs:
      - update_deploy_repo
    steps:

      - name: Init 
        uses: yamaks2306/dd-action@main
        id: init
        with:
          mode: 'init'
          url: ${{ secrets.dd_sec_url }}
          token: ${{ secrets.dd_sec_key }}
          product_type: ${{ inputs.product_type }}

      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          path: .

      - run: |
          mv manifest-report/* .

      - name: Upload manifest-report
        uses: yamaks2306/dd-action@main
        with:
          mode: 'upload_report'
          url: ${{ secrets.dd_sec_url }}
          token: ${{ secrets.dd_sec_key }}
          engagement_id: ${{ steps.init.outputs.engagement_id }}
          test_title: 'Manifest'
          file: 'manifest-report.sarif'

      - name: Count vulnerabilities
        run: |
          echo "MANIFEST_COUNT=$(jq '.runs[].results | length' < ./manifest-report.sarif)" >> $GITHUB_ENV

      - name: Build message
        if: ${{ env.MANIFEST_COUNT > 0 }}
        run: |
          get_message()
          {
          cat <<EOF
          ðŸ’¥ðŸ’¥ðŸ’¥
          Repository: ${{ github.repository }}
          Production manifests was generated.
          The manifest analysis scan found ${{ env.MANIFEST_COUNT }} vulnerabilities.
          See details: ${{ secrets.DD_SEC_URL }}/engagement/${{ steps.init.outputs.engagement_id }}
          EOF
          }
          echo MESSAGE=$(get_message) >> $GITHUB_ENV

      - name: Send message
        if: ${{ env.MANIFEST_COUNT > 0 }}
        uses: yamaks2306/telegram-notification@main
        with:
          token: ${{ secrets.tg_token }}
          chat_id: ${{ secrets.tg_chat_id }}
          include_commit_info: false
          message: ${{ env.MESSAGE }}

      - name: Send message on failure
        if: ${{ failure() }}
        uses: yamaks2306/telegram-notification@main
        with:
          token: ${{ secrets.tg_token }}
          chat_id: ${{ secrets.tg_chat_id }}
          include_commit_info: false
          message: 'ðŸ’¥ðŸ’¥ðŸ’¥ Job was failed! Repository: ${{ github.repository }}, workflow: ${{ github.workflow }}, Job: ${{ github.job }}'